import fetch from 'node-fetch';
import readline from 'readline-sync';
import fs from 'fs';
import chalk from 'chalk';
import cfonts from 'cfonts';

// Hiển thị tiêu đề
cfonts.say('Tom Nuong Cay', {
    font: 'block',
    align: 'center',
    colors: ['cyan', 'magenta'],
    background: 'black',
    letterSpacing: 1,
    lineHeight: 1,
    space: true,
    maxLength: '0',
});
console.log(chalk.green("=== Telegram: t.me/tomnuongcay ==="));

// Đọc file channels.txt
const channelsData = fs.readFileSync("channels.txt", "utf-8")
    .split('\n')
    .map(line => line.trim())
    .filter(line => line.length > 0);

const channelMessages = {};
for (const line of channelsData) {
    const [channelId, message] = line.split('|');
    if (channelId && message) {
        channelMessages[channelId.trim()] = message.trim();
    }
}

// Nhập khoảng thời gian lặp lại (giờ)
const minHours = parseFloat(readline.question("Nhập thời gian lặp lại tối thiểu (giờ): "));
const maxHours = parseFloat(readline.question("Nhập thời gian lặp lại tối đa (giờ): "));

// Kiểm tra đầu vào
if (isNaN(minHours) || isNaN(maxHours) || minHours < 0 || maxHours < 0 || minHours > maxHours || maxHours > 24) {
    console.log(chalk.red("Vui lòng nhập số giờ hợp lệ trong khoảng từ 0 đến 24 và min <= max."));
    process.exit(1);
}

// Hàm tạo thời gian ngẫu nhiên (tính bằng milliseconds)
const getRandomDelay = () => {
    const minMs = minHours * 60 * 60 * 1000;
    const maxMs = maxHours * 60 * 60 * 1000;
    return Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
};

// Tùy chọn xóa tin nhắn
const deleteOption = readline.question("Xóa tin nhắn sau khi gửi? (yes/no): ").toLowerCase() === 'yes';

let waktuHapus = 0;
let waktuSetelahHapus = 0;

if (deleteOption) {
    waktuHapus = parseInt(readline.question("Thời gian delay xóa tin (giây): ")) * 1000;
    waktuSetelahHapus = parseInt(readline.question("Thời gian delay sau khi xóa (giây): ")) * 1000;
}

// Đọc token từ file
const tokens = fs.readFileSync("token.txt", "utf-8").split('\n').map(token => token.trim());

// Hàm gửi tin nhắn
const sendMessage = async (channelId, token, content) => {
    try {
        const response = await fetch(`https://discord.com/api/v9/channels/${channelId}/messages`, {
            method: 'POST',
            headers: {
                'Authorization': token,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ content })
        });

        if (response.ok) {
            const messageData = await response.json();
            console.log(chalk.green(`[✔] Đã gửi "${content}" đến ${channelId}`));
            if (deleteOption) {
                await new Promise(resolve => setTimeout(resolve, waktuHapus));
                await deleteMessage(channelId, messageData.id, token);
            }
            return messageData.id;
        } else if (response.status === 429) {
            const retryAfter = (await response.json()).retry_after;
            await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
            return sendMessage(channelId, token, content);
        } else if (response.status === 401) {
            return null;
        } else {
            console.error(chalk.red(`[!] Lỗi khi gửi tin đến ${channelId}: ${response.status} ${response.statusText}`));
            const errorData = await response.json();
            console.error(errorData);
        }
    } catch (error) {
        console.error(chalk.red("[!] Lỗi khi gửi tin:", error));
    }
    return null;
};

// Hàm xóa tin nhắn
const deleteMessage = async (channelId, messageId, token) => {
    try {
        const delResponse = await fetch(`https://discord.com/api/v9/channels/${channelId}/messages/${messageId}`, {
            method: 'DELETE',
            headers: { 'Authorization': token }
        });
        if (delResponse.ok) {
            console.log(chalk.blue(`[✔] Đã xóa tin ${messageId} trong ${channelId}`));
        } else if (delResponse.status === 401) {
            return;
        } else {
            console.error(chalk.red(`[!] Lỗi khi xóa tin ${messageId} trong ${channelId}: ${delResponse.status} ${delResponse.statusText}`));
            const errorData = await delResponse.json();
            console.error(errorData);
        }
        await new Promise(resolve => setTimeout(resolve, waktuSetelahHapus));
    } catch (error) {
        console.error(chalk.red("[!] Lỗi khi xóa tin:", error));
    }
};

// Hàm chính
const main = async () => {
    while (true) {
        for (const token of tokens) {
            for (const channelId in channelMessages) {
                const messageContent = channelMessages[channelId];
                await sendMessage(channelId, token, messageContent);
            }
        }

        // Đợi khoảng thời gian ngẫu nhiên
        const randomDelay = getRandomDelay();
        const hours = randomDelay / 1000 / 60 / 60;
        console.log(chalk.yellow(`Đợi ${hours.toFixed(2)} giờ trước khi gửi lại...`));
        await new Promise(resolve => setTimeout(resolve, randomDelay));
    }
};

main();
